openapi: 3.0.3
info:
  title: GP SERAM
  version: 2.0.0
  description: >-
    This specification allows a Remote Admin Agent to manage a Secure
    Element thanks to a Local Admin Agent.<br>
    <br>
    2 layers is provided here:<br>
    - the data model which details messages which are exchanges. Refer to the
    Schemas section below.<br>
    - the HTTP REST binding, details in terms of HTTP GET and POST methods.
    Refer to initialization and seApplicationManagement phase below.<br>
    <br>
    The Remote Admin Agent is acting as an HTTP server and the Local Admin
    Agent as an HTTP Client. During the initialization phase, the local Admin
    Agent provides a list of supported data format and transport protocol. The
    server selects the best option and  continue with the selected binding.

    This OpenAPI specification is self-documentated. Please refer to the
    [ GP SERAM github](http://github.com/slegouix/SERAM) for additional information.

  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: seApplicationManagementService
    description: >-
      Remote Admin Agent performs the remote management by sending orders to
      the Local Admin Agent
servers:
  - url: '{protocol}://{domain}/gp/seram'
    variables:
      domain:
        default: localhost
        description: server domain
      protocol:
        enum:
          - http
          - https
        default: https
paths:

  /handshake:
    post:
      tags:
        - seApplicationManagementService
      summary: method used to negociate data format and the transport protocol
      description: >-
        This method shall be used by the HTTP client to tell which data
        formats and which transport protocols it supports. In response, the
        HTTP server shall tell which ones it selects.<br> <br> The DataFormat
        describes which data format is used for message payloads.<br> <br> The
        TransportProtocol describes the transport protocol binding. It details
        how setting-up the transport layer (if required), exchanging the
        messages payload between Remote Agent and Local Agent, keeping the
        integrity of the remote management session and resuming communications
        in case of a data exchange failure<br>
        <br>
        The HTTP client shall used the sessionId to allow the HTTP server to
        track the remote management. The HTTP client shall reused the
        sessionId in all subsequent HTTP request to the HTTP server
      parameters:
        - name: sessionId
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/sessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ramHandshakeCommand'
            examples:
              handshakeRequest:
                summary: Sample of an HTTP request for Handshake Command
                externalValue: 'examples/handshakeRequest.txt'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ramHandshakeResponse'
              examples:
                handshakeResponse:
                  summary: Sample of an HTTP response for handshake Response
                  externalValue: 'examples/handshakeResponse.txt'
        '404':
          description: Session id not found
        '406':
          description: HTTP Server could not fulfill the client proposal
        '500':
          description: Unknown server error

  /remoteManagement:
    post:
      tags:
        - seApplicationManagementService
      summary: Method used to respond to a remote management command.
      description: >-
        This method shall be used by the HTTP client to transmit its response
        to the HTTP server. <br><br> In response, the HTTP server shall send
        the next remote management order.
      parameters:
        - name: sessionId
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/sessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/remoteManagementMsg'
            examples:
              pollingRequest:
                summary: sample of an HTTP polling request
                externalValue: 'examples/pollingRequest.txt'
              seRamResponseRequest:
                summary: sample of an HTTP request with SE RAM responses
                externalValue: 'examples/pollingRequest.txt'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remoteManagementOrder'
              examples:
                pollingResponse:
                  summary: sample of an HTTP polling response
                  externalValue: 'examples/pollingResponse.txt'
                startCommandResponse:
                  summary: sample of an HTTP response with Start Command
                  externalValue: 'examples/startCommandResponse.txt'
                seRamCommandResponse:
                  summary: sample of an HTTP response with SE RAM Command
                  externalValue: 'examples/seRamCommandResponse.txt'
                notificationResponse:
                  summary: sample of an HTTP response with Notification Command
                  externalValue: 'examples/notificationCommandResponse.txt'
                stopCommandResponse:
                  summary: sample of an HTTP response with Stop Command
                  externalValue: 'examples/stopCommandResponse.txt'
        '404':
          description: Session id not found
        '500':
          description: Unknown server error

components:
  schemas:

    remoteManagementOrder:
      description: >-
        This is the data model for the remote management order. The Remote
        Agent may used it to maintain the connection with the Local Agent
        or to send Message Command to the Local Agent. All fields are
        optional.
      properties:
        delay:
          description: >-
            Delay in second the device local agent had to wait before sending
            data to the platform.
          type: integer
          default: 1
        chosenSecureElement:
          allOf:
            - description: >-
                Set the Secure Element the Local Agent SHALL used to send
                C-APDU
            - $ref: '#/components/schemas/secureElement'
        ramCommands:
          description: List of Commands to be executed by the Local Agent.
          type: array
          items:
            $ref: '#/components/schemas/ramCommand'

    remoteManagementMsg:
      description: >-
        This is the data model for the remote management containing SE RAM
        responses. In case of polling message, or for the first polling
        message, only the localAgentStatus is included.
      type: object
      required:
        - localAgentStatus
      properties:
        localAgentStatus:
          allOf:
            - description: Status of the Local Agent
            - $ref: '#/components/schemas/localAgentStatus'
        ramResponses:
          description: The list of RAM responses
          type: array
          items:
            $ref: '#/components/schemas/ramResponse'

    ramHandshakeCommand:
      description: >-
        This is the data model for the handshake command.<br>
        <br>
        If supportedTransportProtocol is not provided, HTTPS is assumed. If
        supportedDataFormat is not provided, application/json is assumed.<br>
        If supportedVersions is not provided, 2.0.0 is assumed. secureElements
        shall be ordered by preference by the client.
      type: object
      required:
        - 'secureElements'
      properties:
        secureElements:
          description: A list of Secure Element available on Local Agent side.
          type: array
          items:
            $ref: '#/components/schemas/secureElement'
        supportedTransportProtocols:
          description: >-
            A list of Transport Protocol supported by the the Local Agent.
          type: array
          items:
            $ref: '#/components/schemas/transportProtocol'
        supportedDataFormats:
          description: >-
            A list of Transport Data Format supported by the Local Agent.
          type: array
          items:
            $ref: '#/components/schemas/dataFormat'
        supportedVersions:
          description: >-
            A list of version of GP SERAM supported by the Local Agent.
          type: array
          items:
            $ref: '#/components/schemas/version'

    ramHandshakeResponse:
      description: >-
        The Handshake Response Message is the Message used by the Remote Agent
        during the Handshake step.<br>
        Each value of the chosen properties shall correspond of one supported
        by the Local Agent."
      required:
        - 'chosenDataProtocol'
        - 'chosenTransportProtocol'
        - 'chosenVersion'
      properties:
        chosenTransportProtocol:
          allOf:
            - description: >-
               The Transport Protocol selected by the Remote Agent.
            - $ref: '#/components/schemas/transportProtocol'
        chosenDataFormat:
          allOf:
            - description: The Data Protocol selected by the Remote Agent.
            - $ref: '#/components/schemas/dataFormat'
        chosenVersion:
          allOf:
            - description: >-
                The Version of GP SERAM selected by the Remote Agent
            - $ref: '#/components/schemas/version'

    ramCommand:
      description: "Command Messages are sent by the Remote Agent and shall\
        \ be executed by the Local Agent."
      required:
        - ramCommandType
      discriminator:
        propertyName: "ramCommandType"
        mapping:
            ramStartCommand: '#/components/schemas/ramStartCommand'
            seRamCommand: '#/components/schemas/seRamCommand'
            notificationCommand : '#/components/schemas/notificationCommand'
            ramStopCommand : '#/components/schemas/ramStopCommand'
      properties:
        ramCommandType:
          description: >-
            The type of Command Message with authorized values listed in the
            discrimitator mapping
          type: string

    ramStartCommand:
      allOf:
        - description: >-
            The RAM Start Command inform the Local Agent of the start of the
            Remote Management Session by the Remote Agent.
        - $ref: '#/components/schemas/ramCommand'

    seRamCommand:
      allOf:
      - description: >-
          The SE RAM Command Message is used to send APDU to the Secure
          Element.<br>
          The Local Agent SHALL send each APDU command of the listOfCAPDU to
          the Secure Element using the SE Access API. The Local Agent SHALL
          add each APDU response to the SE RAM Response Message. If an APDU
          Response is not available, the Local Agent SHALL use an empty
          string as APDU Response. On any error to transmit an APDU command
          to the Secure Element, the Local Agent SHALL discard all the
          remaining APDU commands and SHALL not include any APDU response for
          the faulty transmission. Any warning or error APDU response (i.e.
          69xx or 68xx) are valid APDU response that SHALL be inserted in the
          SE RAM Response. If the stopOnError flag of the SE RAM Command is
          set to 'true', the Local Agent SHALL not execute any remaining APDU
          command after an error APDU response (i.e. 69xx)."
      - $ref: '#/components/schemas/ramCommand'
      - required:
        - 'listOfCAPDU'
      properties:
        listOfCAPDU:
          description: >-
            An ordered list of APDU to send to the Secure Element. Each APDU
            are encoded as hexadecimal string.
          type: array
          items:
            $ref: '#/components/schemas/apdu'
          example:
            - '00A4040008A00000015100000000'

    notificationCommand:
      allOf:
      - description: >-
          The Notification Command Message is used to send processing
          notification to the Device Application. The meaning of the
          notification and how it is handled by the Device Application is
          implementation dependent.
      - $ref: '#/components/schemas/ramCommand'
      - required:
          - 'deviceAppNotification'
      properties:
        deviceAppNotification:
          description: >-
            An UTF-8 string to be notified to the Device Application
          type: string
          example: 'step1/action2/OK'

    ramStopCommand:
      allOf:
        - description: >-
            A Remote Agent uses this Command to mark the end of its processing
            and that no further Message will be sent.<br>
            The Local Agent shall notify the end of the Management Session to
            the Device Application.<br>
            This Message marks the end of the processing by a Management
            Platform and no further Message will be sent.
        - $ref: '#/components/schemas/ramCommand'

    ramResponse:
      description: Response Messages are sent by the Local Agent to the Agent.
      required:
        - 'ramResponseType'
      discriminator:
        propertyName: ramResponseType
        mapping:
          seRamResponse: '#/components/schemas/seRamResponse'
      properties:
        ramResponseType:
          description: >-
            The type of Response Message with authorized values listed in the
            discrimitator mapping
          type: string

    seRamResponse:
      allOf:
      - description: >-
          The SE RAM Response Message contains the APDU responses of the
          Secure Element to a previous SE RAM Command Message.<br>
          For each APDU send to the Secure Element, the Local Agent shall add
          the associated APDU response to the listOfRAPDU property. If an APDU
          response is not available (e.g. for a SELECT or on error), it shall
          be filled with an empty string.
      - $ref: '#/components/schemas/ramResponse'
      - required:
          - 'listOfRAPDU'
        properties:
          listOfRAPDU:
            description: >-
              An ordered list of APDU response of the Secure Element. Each
              APDU are encoded as hexadecimal string.
            type: array
            items:
              $ref: '#/components/schemas/apdu'
            example:
              - '9000'

    apdu:
      description: hexadecimal encoded APDU
      type: string
      pattern: '([0-9A-F]{2})*'

    dataFormat:
      description: Encoding format of GP SERAM Messages
      type: string
      enum:
        - application/json
        - application/cbor

    localAgentStatus:
      description: >-
        The Local Agent SHALL sent a status in each request to the HTTP server.
      required:
        - localAgentStatusEnum
        - executedRamCommands
      properties:
        localAgentStatusEnum:
          description: >-
            Local Agent SHALL send a PROCESSED status whenever at least one
            RAM command has been executed. On any error processing one of
            UNAVAILABLE_SE, UNKNOWN_FAILURE, or UNGRANTED_ACCESS SHALL used.
            And the POLLING status SHALL be used for the first HTTP request or
            is the Remote Agent hasn't sent any Command.
          enum:
            - PROCESSED
            - POLLING
            - UNAVAILABLE_SE
            - UNKNOWN_FAILURE
            - UNGRANTED_ACCESS
        executedRamCommands:
          description: >-
            Number of RAM command executed. Value SHALL be set to zero during
            polling
          type: integer
        errorMsg:
          description: >-
            Additional information provided in case of error (status
            UNAVAILABLE_SE, UNKNOWN_FAILURE, UNGRANDED_ACCESS) that should be
            logged for investigation or for legal purpose.
          type: string

    secureElement:
      description: >-
        A Secure Element. It is composed of the type of Secure Element and the
        identifier of the Secure Element. Moreover, it may includes an
        additional field to provide some additional informations related to
        the Secure Element (E.g. the support the GP SAM)
      type: object
      required:
        - seType
        - seId
      properties:
        seType:
          description: Type of Secure Element.
          type: string
          enum:
            - eSE
            - iSE
            - uicc
            - euicc
            - ieuicc
        seId:
          description: Identifier of the Secure Element.
          type: string
          example: '89001012012341234012345678901224'
        seExtraInfo:
          description: A comma separated list of features supported by the SE.
          type: string
          example: 'SAM'

    sessionId:
      description: >-
        An identifier shared between the Device Application and the Management
        Platform and associated with a Management Session.
      type: string
      example: '0f96af97-f879-45a2-a011-ee7439df3804'

    transportProtocol:
      description: A transport protocol to exchange GP SERAM Messages.
      type: string
      enum:
        - HTTPS
        - CoAP

    version:
      description: A Version of GP SERAM
      type: string
      example: '2.0.0'

